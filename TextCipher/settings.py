"""
Django settings for TextCipher project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from decouple import config
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


#.env file variables
ENV_SECRET_KEY = config("SECRET_KEY")
ENV_ENVIRONMENT = config("ENVIRONMENT", default="LOCAL")
ENV_CORS_ALLOW_HEADERS = config("CORS_ALLOW_HEADERS", default="Content-Type, Authorization").split(",")
LOCAL_PORTS = config("LOCAL_PORTS", default="5173,3000,8000,4173").split(",")

if ENV_ENVIRONMENT == "PROD":
    ENV_ALLOWED_HOSTS = config("ALLOWED_HOSTS").split(",")
    ENV_CSRF_TRUSTED_ORIGINS = config("CSRF_TRUSTED_ORIGINS").split(",")
    ENV_CORS_ALLOWED_ORIGINS = config("CORS_ALLOWED_ORIGINS").split(",")
else:
    ENV_ALLOWED_HOSTS = ['*']
    if ENV_ENVIRONMENT == "STAGING":
        ENV_CSRF_TRUSTED_ORIGINS = config("CSRF_TRUSTED_ORIGINS").split(",") + [f"localhost:{port}" for port in LOCAL_PORTS] + [f"127.0.0.1:{port}" for port in LOCAL_PORTS] + [f"38.242.134.36:{port}" for port in LOCAL_PORTS]
        ENV_CORS_ALLOWED_ORIGINS = config("CORS_ALLOWED_ORIGINS").split(",") + [f"localhost:{port}" for port in LOCAL_PORTS] + [f"127.0.0.1:{port}" for port in LOCAL_PORTS] + [f"38.242.134.36:{port}" for port in LOCAL_PORTS]
    else:
        ENV_CSRF_TRUSTED_ORIGINS = [f"localhost:{port}" for port in LOCAL_PORTS] + [f"127.0.0.1:{port}" for port in LOCAL_PORTS] + [f"38.242.134.36:{port}" for port in LOCAL_PORTS]
        ENV_CORS_ALLOWED_ORIGINS = [f"localhost:{port}" for port in LOCAL_PORTS] + [f"127.0.0.1:{port}" for port in LOCAL_PORTS] + [f"38.242.134.36:{port}" for port in LOCAL_PORTS]


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ENV_SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!

if ENV_ENVIRONMENT == "LOCAL" or ENV_ENVIRONMENT == "STAGING":
    DEBUG = True
else:
    DEBUG = False

# Allowed hosts
ALLOWED_HOSTS = ENV_ALLOWED_HOSTS

# CSRF trusted origins
CSRF_TRUSTED_ORIGINS = [
    *[f"http://{host}" for host in ENV_CSRF_TRUSTED_ORIGINS],
    *[f"https://{host}" for host in ENV_CSRF_TRUSTED_ORIGINS]
]
    
# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    #Third party apps
    'rest_framework',
    'corsheaders',
    'drf_spectacular',
    'rest_framework_simplejwt',

    #Apps
    'api',
    'message',
    'contact',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'TextCipher.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'TextCipher.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

if ENV_ENVIRONMENT == "PROD":
    DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config("PROD_DB_NAME"),
        'USER': config("PROD_DB_USER"),
        'PASSWORD': config("PROD_DB_PASSWORD"),
        'HOST': config("DB_HOST"), 
        'PORT': config("DB_PORT", default=5432, cast=int),
    }
}
elif ENV_ENVIRONMENT == "STAGING":
    DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config("STG_DB_NAME"),
        'USER': config("STG_DB_USER"),
        'PASSWORD': config("STG_DB_PASSWORD"),
        'HOST': config("DB_HOST"), 
        'PORT': config("DB_PORT", default=5432, cast=int),
    }
}
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / "db.sqlite3",
        }
    }


# Rest framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication'
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_SCHEMA_CLASS' : 'drf_spectacular.openapi.AutoSchema',
}


# JWT settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
}

# Spectacular settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'TextCipher API',
    'DESCRIPTION': 'API documentation for TextCipher',
    'VERSION': '1.1.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

# Authentication settings
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend', 
]





FORCE_SCRIPT_NAME = None
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

#Swagger Settings
SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': True,  
    'SECURITY_DEFINITIONS': {
        'apiToken': {
            'type': 'apiKey',
            'name': 'apiToken',
            'in': 'header'
        }
    },
    'JSON_EDITOR': True,  
    'SHOW_REQUEST_HEADERS': True,
    'DEFAULT_MODEL_RENDERING': 'example',
    'BASE_URL': config("BASE_URL")
}

# HTTPONLY settings
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = False

SECURE_CROSS_ORIGIN_OPENER_POLICY = 'unsafe-none' if ENV_ENVIRONMENT in ["LOCAL", "STAGING"] else None


# Secure cookies settings
SESSION_COOKIE_SECURE = ENV_ENVIRONMENT != "LOCAL"
CSRF_COOKIE_SECURE = ENV_ENVIRONMENT != "LOCAL"
SESSION_COOKIE_SAMESITE = 'None' if ENV_ENVIRONMENT in ["LOCAL", "STAGING"] else 'Lax'
CSRF_COOKIE_SAMESITE = 'None' if ENV_ENVIRONMENT in ["LOCAL", "STAGING"] else 'Lax'

# CORS settings
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOWED_ORIGINS = [
    f"http://{host}" for host in ENV_CORS_ALLOWED_ORIGINS
] + [
    f"https://{host}" for host in ENV_CORS_ALLOWED_ORIGINS
]


CORS_ALLOW_CREDENTIALS = True
CORS_EXPOSE_HEADERS = ['Content-Type', 'X-CSRFToken']
CORS_ALLOW_HEADERS = ENV_CORS_ALLOW_HEADERS
    


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Append slash to URL
APPEND_SLASH = True


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static'

# Media files
MEDIA_URL = "media/"
MEDIA_ROOT = "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

